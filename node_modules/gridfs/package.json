{
  "_from": "gridfs",
  "_id": "gridfs@1.0.0",
  "_inBundle": false,
  "_integrity": "sha1-/nXyzoF9AHhQP8YOHLtmWsiOpHc=",
  "_location": "/gridfs",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "gridfs",
    "fetchSpec": "latest",
    "name": "gridfs",
    "raw": "gridfs",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gridfs/-/gridfs-1.0.0.tgz",
  "_shasum": "fe75f2ce817d0078503fc60e1cbb665ac88ea477",
  "_spec": "gridfs",
  "_where": "C:\\Users\\User\\Documents\\GitHub\\SergiDerma",
  "author": {
    "name": "Lewis J Ellis"
  },
  "bugs": {
    "url": "https://github.com/LewisJEllis/gridfs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "gridfs-stream": "^1.1.1"
  },
  "deprecated": false,
  "description": "The GridFS wrapper module for Node.js.",
  "devDependencies": {
    "chai": "2",
    "mongodb": "2"
  },
  "homepage": "https://github.com/LewisJEllis/gridfs",
  "keywords": [
    "gridfs",
    "gridfs-stream",
    "mongo",
    "mongodb",
    "mongoose",
    "wrapper"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gridfs",
  "optionalDependencies": {},
  "readme": "# Gridfs\nThe GridFS wrapper module for Node.js.\n\n  [![NPM Version][npm-image]][npm-url]\n  [![Build Status][travis-image]][travis-url]\n\n```javascript\nvar fs = require('fs');\nvar mongo = require('mongodb');\nvar Grid = require('gridfs');\n\nmongo.MongoClient.connect(yourMongoURI, function(err, db) {\n  var gfs = Grid(db, mongo);\n\n  var source = './example.txt';\n  gfs.fromFile({filename: 'hello.txt'}, source, function (err, file) {\n    console.log('saved %s to GridFS file %s', source, file._id);\n    gfs.readFile({_id: file._id}, function (err, data) {\n      console.log('read file %s: %s', file._id, data.toString());\n    });\n  });\n\n  var contents = 'world';\n  var target = './out.txt';\n  gfs.writeFile({filename: 'world.txt'}, contents, function (err, file) {\n    console.log('wrote \"%s\" to GridFS file %s', contents, file._id);\n    gfs.toFile({_id: file._id}, target, function (err) {\n      var fileContents = fs.readFileSync('./out.txt').toString();\n      console.log('wrote file %s to %s: %s', file._id, target, fileContents);\n    });\n  });\n\n  setTimeout(gfs.list.bind(gfs, function (err, filenames) {\n    console.log('filenames: ' + filenames); // hello.txt, world.txt\n  }), 100);\n});\n```\n\nThis is a simple extension of the excellent [gridfs-stream](https://github.com/aheckmann/gridfs-stream) library, building on its stream interface to provide additional utility methods. As such, huge props to [@aheckmann](https://github.com/aheckmann) and the rest of the contributors to gridfs-stream.\n\n`gridfs` can be used as a drop-in replacement for `gridfs-stream`, as it exports the same object as `gridfs-stream`, just with additional methods available.\n\n# Installation\n```\nnpm install gridfs\n```\n\n# Methods\n\nAll `options` fields are the same as `options` fields in [gridfs-stream](https://github.com/aheckmann/gridfs-stream); they're just passed along to the stream constructors.\n\n#### gfs.readFile(options, cb(err, buffer))\nGet the contents of the GridFS file specified by `options`.\n\n#### gfs.writeFile(options, data, cb(err, file))\nWrite `data` to the GridFS file specified by `options`.\n\n`data` can be a String or a Buffer.\n#### gfs.toFile(options, target, cb(err))\nRead from the GridFS file specified by `options` and write its contents to `target`.\n\n`target` can be a file path or writable stream.\n\n#### gfs.fromFile(options, source, cb(err, file))\nRead from `source` and write its contents to the GridFS file specified by `options`.\n\n`source` can be a file path or readable stream.\n\nReturns the [GridFS writeStream](https://github.com/aheckmann/gridfs-stream#createwritestream) used for writing the file.\n\n#### gfs.list(cb(err, filenames))\nGets the list of files stored in GridFS, using [GridStore.list](http://mongodb.github.io/node-mongodb-native/api-generated/gridstore.html#gridstore-list).\n\n#### Notes on other potentially desirable `fs` methods\n- `fs.stat` - use [gfs.findOne](https://github.com/aheckmann/gridfs-stream#accessing-file-metadata)\n- `fs.unlink` - use [gfs.remove](https://github.com/aheckmann/gridfs-stream#removing-files)\n- `fs.exists` - use [gfs.exist](https://github.com/aheckmann/gridfs-stream#check-if-file-exists)\n- `fs.createReadStream` - use [gfs.createReadStream](https://github.com/aheckmann/gridfs-stream#createreadstream)\n- `fs.createWriteStream` - use [gfs.createWriteStream](https://github.com/aheckmann/gridfs-stream#createwritestream)\n- `fs.appendFile` - not currently feasible due to risk of corruption from parallel writes; see [MongoDB driver 2.0 notes](http://mongodb.github.io/node-mongodb-native/2.0/meta/changes-from-1.0/)\n\n# Contributing\nPull requests are welcome. Guidelines: make sure `npm test` passes.\n\nYou'll need `mocha`, `eslint`, and mongo to run the tests; they use the `gridfs-mocha-test` database on the local mongo server.\n\n[npm-image]: https://img.shields.io/npm/v/gridfs.svg?style=flat\n[npm-url]: https://www.npmjs.com/package/gridfs\n[travis-image]: https://img.shields.io/travis/LewisJEllis/gridfs.svg?style=flat\n[travis-url]: https://travis-ci.org/LewisJEllis/gridfs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/LewisJEllis/gridfs.git"
  },
  "scripts": {
    "test": "eslint index.js test/*.js && mocha"
  },
  "version": "1.0.0"
}
